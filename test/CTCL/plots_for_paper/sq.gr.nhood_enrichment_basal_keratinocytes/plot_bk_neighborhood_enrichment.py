import pandas as pdimport scipy.stats as statsimport osimport itertools as ittfrom IPython.display import set_matplotlib_formatsimport seaborn as snssns.set_theme(style="whitegrid")import matplotlib.pyplot as pltimport numpy as npimport itertoolsfrom statannotations.Annotator import Annotatorfrom decimal import Decimalif __name__ == '__main__':    p_values_cell_type=pd.read_csv(os.path.join('../../results', 'p_values_cell_type_squidpy_nhoodEnrichment.csv'))    squidpy_nhoodEnrichment_results=pd.read_csv(os.path.join('../../results', 'squidpy_nhoodEnrichment_results.csv'))    celltypes_=list(set(p_values_cell_type['celltype_1']).union(set(p_values_cell_type['celltype_2'])).difference(['Basal keratinocytes']))    # celltypes_=['Unknown', 'Langerhans cells', 'Suprabasal keratinocytes']    conditions_=list(np.unique(squidpy_nhoodEnrichment_results.condition))    conditions_abbreviations_dict=dict(zip(conditions_, ['AD', 'PSO', 'CTCL']))    disease_combinations=list(itertools.combinations(conditions_, 2))    for i in celltypes_:        data=pd.concat([squidpy_nhoodEnrichment_results[squidpy_nhoodEnrichment_results['celltype_1']==i][squidpy_nhoodEnrichment_results['celltype_2']=='Basal keratinocytes'], squidpy_nhoodEnrichment_results[squidpy_nhoodEnrichment_results['celltype_2']==i][squidpy_nhoodEnrichment_results['celltype_1']=='Basal keratinocytes']], axis=0)        args = dict(x="condition", y="sq_ne_zscore", data=data, order=list(conditions_)) # hue="condition", order=list(conditions_)        pairs=disease_combinations.copy()        pvals=[]        for j in disease_combinations:            if len(p_values_cell_type[p_values_cell_type['condition_1']==j[0]][p_values_cell_type['condition_2']==j[1]])==0:                p_df=p_values_cell_type[p_values_cell_type['condition_1']==j[1]][p_values_cell_type['condition_2']==j[0]]            else:                p_df=p_values_cell_type[p_values_cell_type['condition_1']==j[0]][p_values_cell_type['condition_2']==j[1]]                        if len(p_df[p_df['celltype_1']==i][p_df['celltype_2']=='Basal keratinocytes'])==0:                p_=str(p_df[p_df['celltype_1']=='Basal keratinocytes'][p_df['celltype_2']==i]['p_value'].values[0])            else:                p_=str(p_df[p_df['celltype_1']==i][p_df['celltype_2']=='Basal keratinocytes']['p_value'].values[0])                        if float(p_)<0.05:                pvals.append('%.2E' % Decimal(p_))            else:                pvals.append('$ns$')            pairs_pvals_dict=dict(zip(pairs, pvals))        fig, axes = plt.subplots(figsize=(20,10))        sns.set(font_scale = 1.2)        sns.set_style("white")        ax = sns.violinplot(**args, cut=0)        # ax = sns.boxplot(**args)        annot = Annotator(ax, pairs, **args)        annot.set_custom_annotations(pvals)        annot.annotate()        pairs_corrected=[]        pvals_corrected=[]        for j in range(len(annot.__dict__['annotations'])):            pair_1=annot.__dict__['annotations'][j].__dict__['structs'][0]['group']            pair_2=annot.__dict__['annotations'][j].__dict__['structs'][1]['group']               pairs_corrected.append((pair_1, pair_2))            try:                pvals_corrected.append(pairs_pvals_dict[(pair_1, pair_2)])            except:                pvals_corrected.append(pairs_pvals_dict[(pair_2, pair_1)])        plot_title=str(('Basal keratinocytes', i))        fig, axes = plt.subplots(figsize=(20,10))        sns.set(font_scale = 1.2)        sns.set_style("white")        ax = sns.violinplot(**args, cut=0)        # ax = sns.boxplot(**args)        # ax.set_xticklabels(radii, size=20)        annot = Annotator(ax, pairs, **args)        annot.configure(text_format='simple', loc='inside', verbose=2, fontsize=25)        annot.set_custom_annotations(pvals_corrected)        annot.annotate()        # plt.xlabel('radius', fontsize=25, labelpad=20)        plt.ylabel('Neighborhood enrichment score', fontsize=25, labelpad=20)        plt.title(plot_title, fontsize=25, pad=20)        xticks=[]        for j in ax.get_yticks():            xticks.append(round(j,1))        ax.set_yticklabels(xticks, size = 20)        plt.savefig(f'{plot_title}_squidpy_neighborhoodEnrichment.pdf', format='pdf', bbox_inches='tight')        fig.tight_layout()        plt.show()                        
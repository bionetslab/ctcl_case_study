import pandas as pdimport osimport seaborn as snssns.set_theme(style="whitegrid")import matplotlib.pyplot as pltfrom _plot_distributions_per_individual_celltypes_ import _plot_distributions_per_individual_celltypes_# ========== Load and pre-process data required for generating plots: ==========cell_results=pd.read_csv(os.path.join('../../results', 'cell_results.csv'))p_values_cell_type=pd.read_csv(os.path.join('../../results', 'p_values_cell_type.csv'))squidpy_nhoodEnrichment_results=pd.read_csv(os.path.join('../../results', 'squidpy_nhoodEnrichment_results.csv'))p_values_cell_type_squidpy_nhoodEnrichment=pd.read_csv(os.path.join('../../results', 'p_values_cell_type_squidpy_nhoodEnrichment.csv'))squidpy_centralityScores_results=pd.read_csv(os.path.join('../../results', 'squidpy_centralityScores_results.csv'))p_values_cell_type_squidpy_centralityScores=pd.read_csv(os.path.join('../../results', 'p_values_cell_type_squidpy_centralityScores.csv'))conditions_=['Eczema', 'T-Cell Lymphoma', 'Psoriasis']conditions=['AD', 'CTCL', 'PSO']conditions_abbreviations_dict=dict(zip(conditions_, conditions))cell_results=cell_results.replace({"condition": conditions_abbreviations_dict})p_values_cell_type=p_values_cell_type.replace({"condition_1": conditions_abbreviations_dict})p_values_cell_type=p_values_cell_type.replace({"condition_2": conditions_abbreviations_dict})squidpy_nhoodEnrichment_results=squidpy_nhoodEnrichment_results.replace({"condition": conditions_abbreviations_dict})p_values_cell_type_squidpy_nhoodEnrichment=p_values_cell_type_squidpy_nhoodEnrichment.replace({"condition_1": conditions_abbreviations_dict})p_values_cell_type_squidpy_nhoodEnrichment=p_values_cell_type_squidpy_nhoodEnrichment.replace({"condition_2": conditions_abbreviations_dict})squidpy_centralityScores_results=squidpy_centralityScores_results.replace({"condition": conditions_abbreviations_dict})p_values_cell_type_squidpy_centralityScores=p_values_cell_type_squidpy_centralityScores.replace({"condition_1": conditions_abbreviations_dict})p_values_cell_type_squidpy_centralityScores=p_values_cell_type_squidpy_centralityScores.replace({"condition_2": conditions_abbreviations_dict})celltypes=sorted(list(set(cell_results.cell_type)))palette={"AD":(0.12156862745098039, 0.4666666666666667, 0.7058823529411765),         "PSO": (0.17254901960784313, 0.6274509803921569, 0.17254901960784313),         "CTCL": (1.0, 0.4980392156862745, 0.054901960784313725)}# ========== Create mosaic for plot: ==========layout = [    ["B-cells", "B-cells", "Basal keratinocytes", "Basal keratinocytes", "Endothelial cells", "Endothelial cells"],    ["Fibroblasts", "Fibroblasts", "Langerhans cells", "Langerhans cells", "Macrophages", "Macrophages"],    ["Melanocytes", "Melanocytes", "Smooth muscle cells", "Smooth muscle cells", "Suprabasal keratinocytes", "Suprabasal keratinocytes"],    [".", "T-cells", "T-cells", "Unknown", "Unknown", "."]]reference_celltype='T-cells'scores=['entropy', 'homophily', 'egophily']conditions=['AD', 'PSO', 'CTCL']radii=[5]hue='condition'legend_loc=Nonetitle_prefix=None # title_prefix='A 'title_loc='left'histplot_count=0for heterogeneity_measure in scores:    histplot_count+=1    fig, axes = plt.subplot_mosaic(layout, figsize=(20,15))    celltype_count=0    for celltype in celltypes:        celltype_count+=1        if celltype_count==11:            legend=True        else:            legend=None        title=celltype        subplot_axis_id=axes[celltype]        plot_title=celltype        _plot_distributions_per_individual_celltypes_(p_values_cell_type, cell_results, celltype, heterogeneity_measure, conditions, radii, subplot_axis_id, legend_loc=legend_loc, title_prefix=title_prefix, title_loc=title_loc, palette=palette, plot_title=plot_title, legend=legend)        # ========== Generate, save and show final plot (fig1): ==========    # plt.subplots_adjust(wspace=0.02, hspace=0.5)    plt.subplots_adjust(wspace=0.70, hspace=0.50)    plt.savefig(f'supfig{histplot_count}_violinplots.pdf', format='pdf', bbox_inches='tight')    # fig.tight_layout(pad=100.0)    plt.show()